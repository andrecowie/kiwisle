package nz.ac.aut.ense701.gui;

import java.awt.Color;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import nz.ac.aut.ense701.gameModel.Game;
import nz.ac.aut.ense701.gameModel.Terrain;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import javax.swing.ImageIcon;



/*
 * Panel for representing a single GridSquare of the island on the GUI.
 * 
 * @author AS
 * @version 1.0 - created
 */

public class GridSquarePanel extends javax.swing.JPanel 
{
    /** 
     * Creates new GridSquarePanel.
     * @param game the game to represent
     * @param row the row to represent
     * @param column the column to represent
     */
    public GridSquarePanel(Game game, int row, int column)
    {
        this.game   = game;
        this.row    = row;
        this.column = column;
        initComponents();
    }

    /**
     * Updates the representation of the grid square panel.
     */
    public void update()
    {
        // get the GridSquare object from the world
        Terrain terrain   = game.getTerrain(row, column);
        boolean squareVisible = game.isVisible(row, column);
        boolean squareExplored = game.isExplored(row, column);
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Color      color = null;
        
        switch ( terrain )
        {
            case SAND     : Image imageSand = toolkit.getImage("beach_sand.png"); 
            Image scaledImage = imageSand.getScaledInstance(50, 70, Image.SCALE_DEFAULT);
            ImageIcon iconSand = new ImageIcon(scaledImage);
            break;
            
            case FOREST   : Image imageForest = toolkit.getImage("forest_grass.png"); 
            Image scaledImage1 = imageForest.getScaledInstance(50, 70, Image.SCALE_DEFAULT);
            ImageIcon iconForest = new ImageIcon(scaledImage1);
            break;
            
            case WETLAND :Image imageWetLand = toolkit.getImage("Marsh_Turf_Texture.png"); 
            Image scaledImage2 = imageWetLand.getScaledInstance(50, 70, Image.SCALE_DEFAULT);
            ImageIcon iconWetLand = new ImageIcon(scaledImage2);
            break;
            
            case SCRUB :  Image imageScrub = toolkit.getImage("scrub.png"); 
            Image scaledImage3 = imageScrub.getScaledInstance(50, 70, Image.SCALE_DEFAULT);
            ImageIcon iconScrub = new ImageIcon(scaledImage3);
            break;
            
            case WATER    :  Image imageWater = toolkit.getImage("water.png"); 
            Image scaledImage4 = imageWater.getScaledInstance(50, 70, Image.SCALE_DEFAULT);
            ImageIcon iconWater = new ImageIcon(scaledImage4);
            break;
            
            default  : color = Color.LIGHT_GRAY; break;
        }
        
        if ( squareExplored || squareVisible )
        {
            // Set the text of the JLabel according to the occupant
            lblText.setText(game.getOccupantStringRepresentation(row,column));
            // Set the colour. 
          
            // set border colour according to 
            // whether the player is in the grid square or not
            setBorder(game.hasPlayer(row,column) ? activeBorder : normalBorder);
        }
        else
        {
            lblText.setText("");
            lblText.setBackground(null);
            setBorder(normalBorder);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        lblText = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setLayout(new java.awt.BorderLayout());

        lblText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblText.setText("content");
        lblText.setOpaque(true);
        add(lblText, java.awt.BorderLayout.CENTER);
    }// </editor-fold>                        
    // Variables declaration - do not modify                     
    private javax.swing.JLabel lblText;
    // End of variables declaration                   
    
    private Game game;
    private int row, column;
    
    private static final Border normalBorder = new LineBorder(Color.BLACK, 1);
    private static final Border activeBorder = new LineBorder(Color.RED, 3);
}
